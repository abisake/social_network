npm i -> installs packages
express -> backend framework
express-validator -> for data validation
bcryptjs -> for encryption of password, a js framework
config -> for global variables
gravatar -> for profile avator (images)
jsonwebtoken -> for passing the token for validation
mongoose -> an layer of framework, which is used for interacting with mongodb 
request -> an module used for sending https request,used for github repository

concurrently -> module which helps to backend express server and front-end react server.

//

process.en.PORT -> used in deploying in hosting server, it will look for this PORT number.
                                ,if its used locally it will look for the PORT number 5000, if there is no environment variable

config -> is a package file,where we can create a file,store all the data in it.
    data which is default throughout the app,so we can import the value whenever we 
    want.so we are storing db.

when connection is made,it return a promise,so we are using 'arrow function' and 'async await'
    so that after connection is established we can see the connection message and we are wrapping
    in a try and catch block.

process.exit(1) -> will make the application exit.

await mongoose.connect(db, {
            useNewUrlParser: true,
            useUnifiedTopology: true
        }) -> use this to remove the warnings 

Model-> is for designing the data,or we are structuring what kind of data we 
    want for our roles,i.e for user we need this kind of data.

Body parser->is used to get data which has been sent to request body.Usually,it used
    to be installed separately,but now we can use with express itself.

Data validation-> it is done by express-validator package. we need to import
    two things,check and validationResult. using this we can validate 
    For eg:[
        check('name', 'Name is required').not().isEmpty(), //name validation
        check('email', 'Please enter a valid email').isEmail(), //email validation
        check('password', 'Please enter a password with minimum 8 characters').isLength({
            min: 8
        }) //password validation with min length.
    ],
    (req, res) => {
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({
                errors: errors.array()
            })
        }
    }
In user.js -> when we trying to find out,whether user is already there or etc...
    we are using async await function, because we can also use .then().catch(),instead 
    we are using async await function, and implementing all the function in a try and catch module.
    
Gravatar:-> is used when we want to display the profile image,which attached to email_id.
    for that const avatar = gravatar.url(email,{
                s:'200',
                r:
                d:
            })
    s: -> default size,r ->  rating, which prevents from adultery images, d-> default,which 
        gives an default image,if there is no image.
Bcryptjs ->is used for encrypting the password.So we are creating an level of encryption and storing in the salt
    then we are using a hash function to encrypt the password and storing in the variable.

Whenever we using the promise,we can use await and async the main function,instead of using promise.
    i.e -> using .then().catch(

jsonwebtoken -> is used for verification and session for any user. it creates an web token, i.e an url
        which contains information we want ot have,url is encrypted.the web token is signed,so that it can be used for validation and verification
        const payload ={
                id = user.id -> here we need to match with mongodb's id,but mongoose has an abstract which converts _id to id.
            }
        payload -> means data/value which is inside in the encrypted url
        jwt.sign() -> is a function,which helps to create signed token so that it can verified from client side
        jwtSceret => is just an message,which is decided by developer
        jwt.sign(payload,jwtSceret)
        const config = require('config') -> no need to mention the path because as we have installed config module.
401 -> status used for not authorized 
400 -> bad request
200 -> everything is fine.
500 -> internal server error
In middleware/auth.js -> we are checking for token,if not we are returning 401 status,then we are decoding the 
    token 
To add a middleware in a request, we need to include the middleware as second argument

const user = await User.findById(req.user.id).select('-password')   
    => here we are searching the user by id,we are using req.user.id because we have assigned the decoded value to req.user
       when we are using req.user.id, password also comes with it ,so to remove it we are using .select('-password')
In route/api.auth.js -> in route.post request,we are comparing the id and id which is stored in db.
    In bcrypt,there is a function which compares encrypted password and normal text password,sy whether it is same or not. => bcrypt.compare()
    If there is no match,we are returning same error message "Invalid credentials", because user should not know, whether email is wrong or password is wrong

Profile.js -> we are creating an model/schema for profile in db.
(routes/api)profile.js -> we are checking whether logged user has a profile or not.
    this is response should be for single user,so we need to have api/profile/me
    if api/profile is given it will give all the user's profiles.
    Here we need user's id, which we are getting form the UserSchema-> user:req.user.id,but user has many fields,
        in which we only need 'name','avatar', so for that we are using populate()-> 1st arg name of the field,2nd array=> which fields are required.

Whenever we are using access as private,we need to implement auth middleware.

In profile.js-> we are creating an user profile using profileFields,if user exists,we are updating the user.
   First we are destructing the req.body variable.then we are creating empty array profileFields.then we are storing the user id and 
   we are checking whether the value is available or not,if available it will stored in db,if not it passes
   For social,it has object within object,so at first we need to declare object,profileFields.social ={},then we are assigning the value
   Then,we are searching for given user.id,if exists update the values & return the json value,if not create
   new object of profile and save() in db.As mongoose function returns a promise,we need to use .then().catch() but as we are using async await,so we
   need to have await before every function.

   We are trying to get profile of an user by his id,which is similar to the get profile of all users,mongodb query will be changing to find() to findOne()
   Here, we are trying to find a match, if there is no profile exists return error.So in Object Id, if a character is replaced it will be valid user_id,
   so we need to send the error message as "no profile found".If there is any server error, we can send error message as "Server error".
   

model/post.js -> we are creating db schema for posts

In api/post.js -> we are creating a profile.So we are importing User,profile and post Schemas,because we need user id,
    profile id,avatar. We are searching for user by his id and removing password 
    And creating a newpost object from Post and save the details 

npx create-react-app <folder_name> -> will install react into folder.

so we need to run react dev server and backend express server also,so we are using concurrently package. adding a script client-> npm start 
concurrently -> "npm run server" "npm run client"

Dev dependencies ->
    axios: to handle http requests,creating global headers
    redux-thunk: an middleware which can make synchronous request
    react-moment: is used to use moment package within the react component

we are using proxy because,when we are making an request, we need to type the entire 
url i.e "http://loaclhost:5000/api/.....",so in order to shorten it,we are using proxy 

Redux -> is a state manager,which controls data flow from the UI component to server and vice-versa.

Redux-dev-tools -> is an extension,in google chrome,which can show how the data is being transferred,
which component has the data.To use it in the browser,we need to create a store in the code.As we have 
installed extension as a package, we can have decent code for it.
So we are creating a script called store.js.

import {createStore,applyMiddleware} from 'redux' -> createStore is for creating redux store so that we could 
use redux-devtools-extension.
we are going to use 'thunk' middleware, so for that we are using 'applyMiddleware'
import {composeWithDevTools} from 'redux-devtools-extension';
import thunk from 'redux-thunk'
import rootReducer from './reducers' -> reducer is for sending/controlling the data,
which is been sent to component,i.e auth reducer,profile reducer,etc....
so for that,we need an root reducer, which will be reducers/index.js.
So as it is in index.js file,so need to explicitly mention it the import path.

const initialState = {}; -> creating an empty initialState

const middleware = [thunk]; the only middleware here is thunk,so we are storing in a variable

const store = createStore(
	rootReducer,
	initialState,
	composeWithDevTools(applyMiddleware(...middleware)),
); -> we are creating an store,for that function,we are passing rootReducer,initialState and as we
are using redux-devtools,using composeWithDevTools()-> applying the middleware function and 
sending the middleware and by using spread operator,to copy the all data in the array,

Provider -> react and redux is a two separate things,so we need to enclose it 
as a single package, so we are using provider to enclose it

export const setAlert = (msg,alertType) => dispatch => {
    dispatch({
        type:SET_ALERT,
        payload:{msg,alertType,id}
    })
}->  we can call dispatch like that because,dispatch is an middleware.
-> here we are assigning dispatch's type as SET_ALERT and payload(i.e data) as msg, alertType
and the id.

connect -> is package which is used to connect the redux and react, and also we can work on
redux.
SET_ALERT is an prop so we need to use proptypes
IN register.js, there are many alerts,we have so we need to connect the register component and redux,
for that we ar using connect.Whenever connect is used,
we need to export it 
export default connect()(<component_name>)

connect() => takes two arguments, 1.state, which we want to map
2.Actions, which we want to happen
