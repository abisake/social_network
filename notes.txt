npm i -> installs packages
express -> backend framework
express-validator -> for data validation
bcryptjs -> for encryption of password, a js framework
config -> for global variables
gravatar -> for profile avator (images)
jsonwebtoken -> for passing the token for validation
mongoose -> an layer of framework, which is used for interacting with mongodb 
request -> an module used for sending https request,used for github repository

concurrently -> module which helps to backend express server and front-end react server.

//

process.en.PORT -> used in deploying in hosting server, it will look for this PORT number.
                                ,if its used locally it will look for the PORT number 5000, if there is no environment variable

config -> is a package file,where we can create a file,store all the data in it.
    data which is default throughout the app,so we can import the value whenever we 
    want.so we are storing db.

when connection is made,it return a promise,so we are using 'arrow function' and 'async await'
    so that after connection is established we can see the connection message and we are wrapping
    in a try and catch block.

process.exit(1) -> will make the application exit.

await mongoose.connect(db, {
            useNewUrlParser: true,
            useUnifiedTopology: true
        }) -> use this to remove the warnings 

Model-> is for designing the data,or we are structuring what kind of data we 
    want for our roles,i.e for user we need this kind of data.

Body parser->is used to get data which has been sent to request body.Usually,it used
    to be installed separately,but now we can use with express itself.

Data validation-> it is done by express-validator package. we need to import
    two things,check and validationResult. using this we can validate 
    For eg:[
        check('name', 'Name is required').not().isEmpty(), //name validation
        check('email', 'Please enter a valid email').isEmail(), //email validation
        check('password', 'Please enter a password with minimum 8 characters').isLength({
            min: 8
        }) //password validation with min length.
    ],
    (req, res) => {
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({
                errors: errors.array()
            })
        }
    }
In user.js -> when we trying to find out,whether user is already there or etc...
    we are using async await function, because we can also use .then().catch(),instead 
    we are using async await function, and implementing all the function in a try and catch module.
    
Gravatar:-> is used when we want to display the profile image,which attached to email_id.
    for that const avatar = gravatar.url(email,{
                s:'200',
                r:
                d:
            })
    s: -> default size,r ->  rating, which prevents from adultery images, d-> default,which 
        gives an default image,if there is no image.
Bcryptjs ->is used for encrypting the password.So we are creating an level of encryption and storing in the salt
    then we are using a hash function to encrypt the password and storing in the variable.

Whenever we using the promise,we can use await and async the main function,instead of using promise.
    i.e -> using .then().catch()